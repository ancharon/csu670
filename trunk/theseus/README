Nathan Palmer
Ethan Caldwell
David Fier



How to build Theseus on a CCIS Solaris machine:
1. Navigate to the theseus folder (in this case, the root of the submission).
2. Run "python build.py"
3. You can now use "scsh -l game7.scm" to run the game with our frog-grabbing-and-escaping program.

Files
-----
exec
    - (nothing until you run the build)
freeze
    - Contains tools used to build a unix executable from a collection of Python
    scripts and modules.
xml
    - Various input/output files used for testing purposes and specification.
-build.py
    The build script. Fills the "exec" folder with C files and an executable.
-config.py
    Holds global configuration settings for easy access. See Notes for details.
-gameparser.py, jing.jar
    Parser for the incoming XML data. Uses jing.jar for validation.
-gameplayer.py
    Plays the game.
-graph.py
    Data structures used by gameplayer.py.
-theseus.py
    Initializes the GamePlayer and gets it going.
-gameplayer.log
    Will not initially be in the folder, but will be generated by the logging messages
    when Theseus begins to run.
-README
    This readme file.


Referee Files
------------
-game7.scm, game7.sls, makeLexer.sch, referee.pg, refereeTokens.sch, myprogram
    A game file that runs Theseus with a random castle, specified by game7.sls.


Notes
-----
The actual executable file is called "theseus" and is in the "exec" folder.

Jing is a large performance hit. You can turn it off in config.py if you are
confident that you have only valid XML input. (more details in config.py) For
this assignment, we have turned off validation to make the program run more
quickly. If you want to try it with validation, go ahead and swap the value to
True.

In config.py, INFINITY is set to 1e3000. This is indeed a large number, but it
is not in fact equal to infinity. While there is an accepted idiom for infinity
in the latest version of Python, it is not defined in the version running on
CCIS Solaris machines. Therefore, we assume that a castle will not be bigger
than 1e3000 rooms. If it is, Theseus' behavior is undefined.
    subnote: The CCIS Solaris machines actually _do_ handle the Python concept
    of infinity correctly. However, many other machines running the same
    version of Python do not. In the interest of consistency in testing, we
    opted to go with the lowest common denominator.

During our testing, we found that it was possible for this program to get into an
infinite loop. It is good to be aware of this, since the process may have to be
killed. The reason this happens is because of the pseudorandomness of entering
from the Outside. In several test cases, we found that entering from one Outside
would only bring you to one or two other Outsides, each of which would only bring
you back to the others. Because of this, our program gets confused and tries to
find either an exit it hasn't been through or an Outside exit to get to a new
section of the castle, and sometimes it will loop endlessly through these Outside
exits. We did not have enough time to find a good solution to this problem, so
unfortunately it is a possible issue with the program as it stands. However, we
can take consolation in the fact that if either we or someone else finds the frog,
the next time our program loops outside it will end the game and stop the looping.